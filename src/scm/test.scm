(define main ((lambda (Cons) ((lambda (Nil) ((lambda (Tnil) ((lambda (Node) ((lambda (foldl) ((lambda (range) ((lambda (add) ((lambda (insert) ((lambda (treesum) ((lambda (main) ((((((main treesum) range) main) insert) foldl) add)) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) ((lambda (t) ((lambda (b) ((lambda (a) (((((((treesum treesum) range) main) insert) foldl) add) t)) ((((((((insert treesum) range) main) insert) foldl) add) b) (lambda (unit) 3)))) ((((((((insert treesum) range) main) insert) foldl) add) t) (lambda (unit) 2)))) ((((((((insert treesum) range) main) insert) foldl) add) ((((((((insert treesum) range) main) insert) foldl) add) ((((((((insert treesum) range) main) insert) foldl) add) ((((((Tnil treesum) range) main) insert) foldl) add)) (lambda (unit) 10))) (lambda (unit) 20))) (lambda (unit) 5))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (t) ((t (lambda (unit) 0)) (lambda (r) (lambda (x) (lambda (l) (lambda (unit) (+ ((lambda (unit) (+ ((((((((treesum treesum) range) main) insert) foldl) add) l) ) (x ))) ) ((((((((treesum treesum) range) main) insert) foldl) add) r) )))))))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (t) (lambda (a) ((t (((((((((Node treesum) range) main) insert) foldl) add) ((((((Tnil treesum) range) main) insert) foldl) add)) a) ((((((Tnil treesum) range) main) insert) foldl) add))) (lambda (r) (lambda (x) (lambda (l) (if (lambda (unit) (> (x ) (a ))) (((((((((Node treesum) range) main) insert) foldl) add) ((((((((insert treesum) range) main) insert) foldl) add) l) a)) x) r) (((((((((Node treesum) range) main) insert) foldl) add) l) x) ((((((((insert treesum) range) main) insert) foldl) add) r) a))))))))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (a) (lambda (b) (lambda (unit) (+ (a ) (b ))))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (n) (if (lambda (unit) (= (n ) ((lambda (unit) 0) ))) ((((((Nil treesum) range) main) insert) foldl) add) ((((((((Cons treesum) range) main) insert) foldl) add) n) (((((((range treesum) range) main) insert) foldl) add) (lambda (unit) (- (n ) ((lambda (unit) 1) ))))))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (f) (lambda (a) (lambda (l) ((l (lambda (xs) (lambda (x) (((((((((foldl treesum) range) main) insert) foldl) add) f) ((f a) x)) xs)))) a)))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (Tree_0) (lambda (a_1) (lambda (Tree_2) (lambda (Tnil) (lambda (Node) (((Node Tree_2) a_1) Tree_0)))))))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (Tnil) (lambda (Node) Tnil)))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (Cons) (lambda (Nil) Nil)))))))))) (lambda (treesum) (lambda (range) (lambda (main) (lambda (insert) (lambda (foldl) (lambda (add) (lambda (a_0) (lambda (List_1) (lambda (Cons) (lambda (Nil) ((Cons List_1) a_0)))))))))))))
(display main)
