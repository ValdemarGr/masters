type Maybe a =
  | Nothing
  | Just a
;
type Stack a =
  | Nil
  | Cons a (Stack a)
;
type Tuples a b = Tuple a b;

fun push xs x = 
  Cons x xs;

fun popt s =
  match s
    | Nil -> Tuple Nothing Nil;
    | Cons x xs -> Tuple (Just x) xs;
  ;

fun pop xs =
  match xs
    | Nil -> Nothing;
    | Cons x rest -> Just x;
  ;

fun tail xs = 
  match xs
    | Nil -> Nil;
    | Cons x xs -> xs;
  ;

fun main =
  let emptyStack = Nil;
  let s = push (push emptyStack 1) 2;
  let p = popt s;
  match p
    | Tuple m r ->
      match m
        | Nothing -> 0;
        | Just x -> x;
      ;
  ;
